openapi: 3.0.0
info:
  title: Backend API for Fadviser Financial service
  version: 0.0.1

servers: 
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        _id: 
          type: string
        name:
          type: string
        email:
          type: string
          required: true
        login:
          type: string
        password:
          type: string
        avatar:
          type: string
    Tokens:
      type: object
      properties:
        token: 
          type: string
        expiredToken:
          type: string
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    UnauthenticatedError:
      description: Access token is missing, expired or invalid
    InternalServerError:
      description: Internal Server Error
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []

paths:
  /users/register:
    post:
      tags:
        - Authorization
      security: 
        []
      summary: Register
      description: Creates new user
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                  description: User real name
                email:
                  type: string
                  description: User email
                  required: true
                  unique: true
                login:
                  type: string
                  description: User login
                  required: true
                  unique: true
                password:
                  type: string
                  description: User password
                  required: true
                avatar:
                  type: string
                  description: User avatar. Temprorary is string
      responses:
        201:
          description: Successfull creation
        417: 
          description: User already exists
        500:
          $ref: '#/components/responses/InternalServerError'
  /users/login:
    post:
      tags:
        - Authorization
      security:
        []
      summary: Login
      description: Allows to get userTokens or send error message
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              type: object
              title: example
              properties:
                login:
                  type: string
                  description: User login
                  required: true
                password:
                  type: string
                  description: User password
                  required: true
      responses:
        200:
          description: Successfull Authorization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tokens"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          description: Invalid login or password
  /users/{userId}:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user
      description: Gets user
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/{userId}/update:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Users
      summary: Update user
      description: Should get any data for update. No required fields in request body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                login:
                  type: string
                email:
                  type: string
                password: 
                  type: string
                avatar:
                  type: string       
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/{userId}/delete:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Delete user
      description: Permamently deletes user
      responses:
        204:
          description: Successful operation. User is not existed anymore
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found