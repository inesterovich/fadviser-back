openapi: 3.0.0
info:
  title: Backend API for Fadviser Financial service
  version: 0.0.1

servers: 
  - url: /

components:
  schemas:
    User:
      type: object
      properties:
        _id: 
          type: string
        name:
          type: string
        email:
          type: string
        login:
          type: string
        password:
          type: string
        avatar:
          type: string
    AuthData:
      type: object
      properties:
        token: 
          type: string
        _id:
          type: string
          format: objectId
    Operation:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          example: "60703794c4da8b26d823f144"
        date: 
          type: string
          format: date-time
        category:
          type: string
        operationType:
          type: string
        sum:
          type: number
    Account:
      type: object
      properties:
        _id:
          type: string
          format: objectId
          example: "60703794c4da8b26d823f144"
        name:
          type: string
        operations:
          type: array
          items:
            $ref: "#/components/schemas/Operation"
        sum:
          type: number
        owner:
          type: string
          format: objectId
          example: "60703794c4da8b26d823f144"
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    UnauthenticatedError:
      description: Access token is missing, expired or invalid
    InternalServerError:
      description: Internal Server Error
    BadRequestError:
      description: Validation of request data failed
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []

paths:
  /users/register:
    post:
      tags:
        - Authorization
      security: 
        []
      summary: Register
      description: Creates new user
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              required:
                  - email
                  - login
                  - password
              title: example
              properties:
                email:
                  type: string
                  description: User email
                login:
                  type: string
                  description: User login
                password:
                  type: string
                  description: User password
      responses:
        201:
          description: Successfull creation
        400: 
          $ref: '#/components/responses/BadRequestError'
        417: 
          description: User already exists
  /users/login:
    post:
      tags:
        - Authorization
      security:
        []
      summary: Login
      description: Allows to get userTokens or send error message
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              type: object
              title: example
              required:
                  - login
                  - password
              properties:
                login:
                  type: string
                  description: User login
                password:
                  type: string
                  description: User password
      responses:
        200:
          description: Successfull Authorization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthData"
        403:
          $ref: '#/components/responses/UnauthenticatedError'
  /users/{userId}:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Get user
      description: Gets user
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/{userId}/update:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Users
      summary: Update user
      description: Should get any data for update. No required fields in request body
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              properties:
                name:
                  type: string
                login:
                  type: string
                email:
                  type: string
                password: 
                  type: string
                avatar:
                  type: string       
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/User"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
  /users/{userId}/delete:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Delete user
      description: Permamently deletes user
      responses:
        204:
          description: Successful operation. User is not existed anymore
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/accounts:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Accounts
      summary: Get all user accounts
      description: Get all accounts of this user
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Accounts not found yet
  /users/{userId}/accounts/{accountId}:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: accountId
        description: accountId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Accounts
      summary: Get one account
      description: Get one user Account
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Account not found"
  /users/{userId}/accounts/create:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Accounts
      summary: Create account
      description: Create new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: example
              required:
                  - name
                  - sum
              properties:
                name:
                  type: string
                sum:
                  type: number
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        417:
          description: "Account with this name already exists"
  /users/{userId}/accounts/{accountId}/delete:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: accountId
        description: accountId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Accounts
      summary: Delete account
      description: Permamently deletes account
      responses:
        204:
          description: Successful operation. Account is not existed anymore
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/accounts/{accountId}/add:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: accountId
        description: accountId
        in: path
        required: true
        schema:
          type: string
    post:
      tags:
        - Operations
      summary: Add operation to account
      description: Add operation to userAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                  - date
                  - category
                  - operationType
                  - sum
              properties:
                date: 
                  type: string
                  format: date-time
                category:
                  type: string
                operationType:
                  type: string
                sum:
                  type: number
      responses:
        200:
          description: Operation added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/accounts/{accountId}/{operationId}/update:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: accountId
        description: accountId
        in: path
        required: true
        schema:
          type: string
      - name: operationId
        description: operationId
        in: path
        required: true
        schema: 
          type: string
    post:
      tags:
        - Operations
      summary: Update operation in userAccount
      description: Update operation in userAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                  - _id
                  - date
                  - category
                  - operationType
                  - sum
              properties:
                _id: 
                  type: string
                  format: objectId
                  example: "60703794c4da8b26d823f144"
                date: 
                  type: string
                  format: date-time
                category:
                  type: string
                operationType:
                  type: string
                sum:
                  type: number
      responses:
        200:
          description: Operation updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /users/{userId}/accounts/{accountId}/{operationId}/delete:
    parameters:
      - name: userId
        description: userId
        in: path
        required: true
        schema:
          type: string
      - name: accountId
        description: accountId
        in: path
        required: true
        schema:
          type: string
      - name: operationId
        description: operationId
        in: path
        required: true
        schema: 
          type: string
    post:
      tags:
        - Operations
      summary: Update operation in userAccount
      description: Update operation in userAccount
      responses:
        200:
          description: Operation deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: '#/components/responses/UnauthorizedError'
